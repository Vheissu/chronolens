rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    function isSignedIn() { return request.auth != null; }
    function sceneDoc(sceneId) { return firestore.get(/databases/(default)/documents/scenes/$(sceneId)); }
    function isOwnerOfScene(sceneId) { return isSignedIn() && sceneDoc(sceneId).data.ownerUid == request.auth.uid; }
    function isPublished(sceneId) { return sceneDoc(sceneId).data.public.isPublic == true; }

    // Match an object like: scenes/{sceneId}/original.<any-extension>
    // Storage rules cannot capture part of a path segment (e.g., ".{ext}").
    // Capture the whole filename and validate it with a regex.
    match /scenes/{sceneId}/{filename} {
      allow read, write, delete: if filename.matches('^original\\..+$') && isOwnerOfScene(sceneId);
    }

    match /scenes/{sceneId}/renders/{era}/{name=**} {
      allow read: if isOwnerOfScene(sceneId) || isPublished(sceneId);
      allow write, delete: if false;
    }

    match /scenes/{sceneId}/thumbs/{name=**} {
      allow read: if isOwnerOfScene(sceneId) || isPublished(sceneId);
      allow write, delete: if false;
    }

    match /{path=**} { allow read, write: if false; }
  }
}
