rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }

    match /users/{uid} {
      allow read: if isOwner(uid);
      allow write: if false;
    }

    match /scenes/{sceneId} {
      allow read: if resource.data.public.isPublic == true || isOwner(resource.data.ownerUid);
      allow create: if isSignedIn()
                 && request.resource.data.ownerUid == request.auth.uid
                 && request.resource.data.keys().hasOnly([
                      'ownerUid','title','original','eras','status','createdAt','updatedAt'
                    ]);
      allow update: if isOwner(resource.data.ownerUid)
                 && request.resource.data.ownerUid == resource.data.ownerUid
                 && request.resource.data.outputs == resource.data.outputs
                 && request.resource.data.public == resource.data.public;
      allow delete: if isOwner(resource.data.ownerUid);
    }

    match /jobs/{jobId} {
      allow read: if isOwner(resource.data.ownerUid);
      allow write: if false;
    }

    match /public/{publicId} {
      allow read: if true;
      allow write: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
